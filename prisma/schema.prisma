generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model User {
  id                     Int        @id @default(autoincrement())
  name                   String
  email                  String     @unique
  password               String
  profileImage           String? // URL or path to profile image
  coverImage             String? // URL or path to cover image
  bio                    String? // Short bio about the user
  ssn                    String? // Social Security Number
  phoneNumber            String? // User's phone number
  dateOfBirth            DateTime? // User's date of birth
  gender                 String? // Gender of the user
  address                String? // Physical address (if not stored separately)
  defaultBillingAddress  Int?
  defaultShippingAddress Int?
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  role                   Role       @default(USER)
  userAgentInfo          Json? // Information about the user's device and browser
  ipAddress              String? // New field
  location               Json? // New field
  Address                Address[]
  cartItems              CartItem[]
  reviews                Review[]
  orders                 Order[]

  @@map("users")
}

model Address {
  id        Int      @id @default(autoincrement())
  lineOne   String
  lineTwo   String?
  city      String
  country   String
  pincode   String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "addresses_userId_fkey")
  @@map("addresses")
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String     @db.Text
  price       Decimal
  tags        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cartItems   CartItem[]
  reviews     Review[]

  orders OrderProduct[]

  @@fulltext([name, description, tags])
  @@map("products")
}

model CartItem {
  id        Int          @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  product   Product      @relation(fields: [productId], references: [id])
  user      User         @relation(fields: [userId], references: [id])
  events    OrderEvent[]

  @@index([productId], map: "cart_items_productId_fkey")
  @@index([userId], map: "cart_items_userId_fkey")
  @@map("cart_items")
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    String
  comment   String
  productId Int
  userId    Int
  imagePath String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model Order {
  id        Int              @id @default(autoincrement())
  userId    Int
  user      User             @relation(fields: [userId], references: [id])
  netAmount Decimal
  address   String
  status    OrderEventStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  products OrderProduct[]
  events   OrderEvent[]

  @@map("orders")
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_products")
}

model OrderEvent {
  id         Int              @id @default(autoincrement())
  orderId    Int
  order      Order            @relation(fields: [orderId], references: [id])
  status     OrderEventStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  CartItem   CartItem?        @relation(fields: [cartItemId], references: [id])
  cartItemId Int?

  @@map("order_events")
}
